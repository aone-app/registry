// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: registry.proto

package registryconnect

import (
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"

	connect_go "github.com/bufbuild/connect-go"
	registry "nerosoft.com/aone/registry/gen"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// RegistryServiceName is the fully-qualified name of the RegistryService service.
	RegistryServiceName = "registry.RegistryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RegistryServiceRegisterProcedure is the fully-qualified name of the RegistryService's Register
	// RPC.
	RegistryServiceRegisterProcedure = "/registry.RegistryService/Register"
	// RegistryServiceDeregisterProcedure is the fully-qualified name of the RegistryService's
	// Deregister RPC.
	RegistryServiceDeregisterProcedure = "/registry.RegistryService/Deregister"
	// RegistryServiceGetNodesProcedure is the fully-qualified name of the RegistryService's GetNodes
	// RPC.
	RegistryServiceGetNodesProcedure = "/registry.RegistryService/GetNodes"
)

// RegistryServiceClient is a client for the registry.RegistryService service.
type RegistryServiceClient interface {
	Register(context.Context, *connect_go.Request[registry.RegisterRequest]) (*connect_go.Response[registry.RegisterReply], error)
	Deregister(context.Context, *connect_go.Request[registry.DeregisterRequest]) (*connect_go.Response[registry.DeregisterReply], error)
	GetNodes(context.Context, *connect_go.Request[registry.GetNodesRequest]) (*connect_go.Response[registry.GetNodesReply], error)
}

// NewRegistryServiceClient constructs a client for the registry.RegistryService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRegistryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) RegistryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &registryServiceClient{
		register: connect_go.NewClient[registry.RegisterRequest, registry.RegisterReply](
			httpClient,
			baseURL+RegistryServiceRegisterProcedure,
			opts...,
		),
		deregister: connect_go.NewClient[registry.DeregisterRequest, registry.DeregisterReply](
			httpClient,
			baseURL+RegistryServiceDeregisterProcedure,
			opts...,
		),
		getNodes: connect_go.NewClient[registry.GetNodesRequest, registry.GetNodesReply](
			httpClient,
			baseURL+RegistryServiceGetNodesProcedure,
			opts...,
		),
	}
}

// registryServiceClient implements RegistryServiceClient.
type registryServiceClient struct {
	register   *connect_go.Client[registry.RegisterRequest, registry.RegisterReply]
	deregister *connect_go.Client[registry.DeregisterRequest, registry.DeregisterReply]
	getNodes   *connect_go.Client[registry.GetNodesRequest, registry.GetNodesReply]
}

// Register calls registry.RegistryService.Register.
func (c *registryServiceClient) Register(ctx context.Context, req *connect_go.Request[registry.RegisterRequest]) (*connect_go.Response[registry.RegisterReply], error) {
	return c.register.CallUnary(ctx, req)
}

// Deregister calls registry.RegistryService.Deregister.
func (c *registryServiceClient) Deregister(ctx context.Context, req *connect_go.Request[registry.DeregisterRequest]) (*connect_go.Response[registry.DeregisterReply], error) {
	return c.deregister.CallUnary(ctx, req)
}

// GetNodes calls registry.RegistryService.GetNodes.
func (c *registryServiceClient) GetNodes(ctx context.Context, req *connect_go.Request[registry.GetNodesRequest]) (*connect_go.Response[registry.GetNodesReply], error) {
	return c.getNodes.CallUnary(ctx, req)
}

// RegistryServiceHandler is an implementation of the registry.RegistryService service.
type RegistryServiceHandler interface {
	Register(context.Context, *connect_go.Request[registry.RegisterRequest]) (*connect_go.Response[registry.RegisterReply], error)
	Deregister(context.Context, *connect_go.Request[registry.DeregisterRequest]) (*connect_go.Response[registry.DeregisterReply], error)
	GetNodes(context.Context, *connect_go.Request[registry.GetNodesRequest]) (*connect_go.Response[registry.GetNodesReply], error)
}

// NewRegistryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRegistryServiceHandler(svc RegistryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	registryServiceRegisterHandler := connect_go.NewUnaryHandler(
		RegistryServiceRegisterProcedure,
		svc.Register,
		opts...,
	)
	registryServiceDeregisterHandler := connect_go.NewUnaryHandler(
		RegistryServiceDeregisterProcedure,
		svc.Deregister,
		opts...,
	)
	registryServiceGetNodesHandler := connect_go.NewUnaryHandler(
		RegistryServiceGetNodesProcedure,
		svc.GetNodes,
		opts...,
	)
	return "/registry.RegistryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RegistryServiceRegisterProcedure:
			registryServiceRegisterHandler.ServeHTTP(w, r)
		case RegistryServiceDeregisterProcedure:
			registryServiceDeregisterHandler.ServeHTTP(w, r)
		case RegistryServiceGetNodesProcedure:
			registryServiceGetNodesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRegistryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRegistryServiceHandler struct{}

func (UnimplementedRegistryServiceHandler) Register(context.Context, *connect_go.Request[registry.RegisterRequest]) (*connect_go.Response[registry.RegisterReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("registry.RegistryService.Register is not implemented"))
}

func (UnimplementedRegistryServiceHandler) Deregister(context.Context, *connect_go.Request[registry.DeregisterRequest]) (*connect_go.Response[registry.DeregisterReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("registry.RegistryService.Deregister is not implemented"))
}

func (UnimplementedRegistryServiceHandler) GetNodes(context.Context, *connect_go.Request[registry.GetNodesRequest]) (*connect_go.Response[registry.GetNodesReply], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("registry.RegistryService.GetNodes is not implemented"))
}
